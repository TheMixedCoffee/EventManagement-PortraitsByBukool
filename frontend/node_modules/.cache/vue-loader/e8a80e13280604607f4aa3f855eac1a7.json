{"remainingRequest":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\src\\components\\Inbox.vue?vue&type=template&id=65e85b86&","dependencies":[{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\src\\components\\Inbox.vue","mtime":1609287810986},{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607795565778},{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607795565778},{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}