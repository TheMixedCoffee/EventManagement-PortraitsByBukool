{"remainingRequest":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\src\\components\\Manager\\ManagerSuppliers.vue?vue&type=template&id=ccab8928&scoped=true&","dependencies":[{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\src\\components\\Manager\\ManagerSuppliers.vue","mtime":1608734927764},{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607795565778},{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607795565778},{"path":"D:\\Files\\GitHub\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICBfdm0uX20oMCksCiAgICBfYygiaDEiLCBbX3ZtLl92KCJNYW5hZ2VyIFBhZ2UgLSBTdXBwbGllcnMiKV0pLAogICAgX2MoCiAgICAgICJhIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1zdWNjZXNzIiwKICAgICAgICBhdHRyczogeyAiZGF0YS10b2dnbGUiOiAibW9kYWwiLCAiZGF0YS10YXJnZXQiOiAiI2FkZFN1cHBsaWVyTW9kYWwiIH0sCiAgICAgICAgb246IHsKICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuIF92bS5yZXNldCgpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX3ZtLl92KCJBZGQgQ29udGFjdCAiKSwKICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtcGx1cy1jaXJjbGUgZmEtbGciIH0pCiAgICAgIF0KICAgICksCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJyb3cgcm93LWNvbHMtMSByb3ctY29scy1tZC0zIGctNCIgfSwKICAgICAgX3ZtLl9sKF92bS5zdXBwbGllcnMsIGZ1bmN0aW9uKHN1cHBsaWVyKSB7CiAgICAgICAgcmV0dXJuIF9jKCJkaXYiLCB7IGtleTogc3VwcGxpZXIuaWQsIHN0YXRpY0NsYXNzOiAiY29sIG1iLTMiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZCBoLTEwMCIgfSwgWwogICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1oZWFkZXIiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKHN1cHBsaWVyLmNvbXBhbnlfbmFtZSkpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDb250YWN0IG5vOiAiICsgX3ZtLl9zKHN1cHBsaWVyLmNvbnRhY3RfbnVtYmVyKSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLWZvb3RlciIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSB0ZXh0LXdoaXRlIGJ0bi1zbSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgImRhdGEtdG9nZ2xlIjogIm1vZGFsIiwKICAgICAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAiI3Nob3dTdXBwbGllck1vZGFsIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZ2V0U3VwcGxpZXJCeUlkKHN1cHBsaWVyLmlkKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkRldGFpbHMiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSBidG4tc20gbWwtMSB0ZXh0LXdoaXRlIiB9LAogICAgICAgICAgICAgICAgW192bS5fdigiSGlzdG9yeSIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgfSksCiAgICAgIDAKICAgICksCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogIm1vZGFsIGZhZGUiLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBpZDogInNob3dTdXBwbGllck1vZGFsIiwKICAgICAgICAgIHRhYmluZGV4OiAiLTEiLAogICAgICAgICAgImFyaWEtbGFiZWxsZWRieSI6ICJleGFtcGxlTW9kYWxMYWJlbCIsCiAgICAgICAgICAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWRpYWxvZyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1jb250ZW50IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaGVhZGVyIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiaDUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1vZGFsLXRpdGxlIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJleGFtcGxlTW9kYWxMYWJlbCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5jb21wYW55X25hbWUpKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fbSgxKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5kZXNjcmlwdGlvbikpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRleHQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQ29udGFjdCBQZXJzb246ICIgKyBfdm0uX3MoX3ZtLmNvbnRhY3RfcGVyc29uKSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRleHQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiQ29udGFjdCBudW1iZXI6ICIgKyBfdm0uX3MoX3ZtLmNvbnRhY3RfbnVtYmVyKSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRleHQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiRW1haWwgQWRkcmVzczogIiArIF92bS5fcyhfdm0uZW1haWwpKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl9tKDIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICksCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogIm1vZGFsIGZhZGUiLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBpZDogImFkZFN1cHBsaWVyTW9kYWwiLAogICAgICAgICAgdGFiaW5kZXg6ICItMSIsCiAgICAgICAgICAiYXJpYS1sYWJlbGxlZGJ5IjogImV4YW1wbGVNb2RhbExhYmVsIiwKICAgICAgICAgICJhcmlhLWhpZGRlbiI6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtZGlhbG9nIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWJvZHkiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgcm93IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sLXNtLTQgY29sLWZvcm0tbGFiZWwiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogImNvbXBhbnlfbmFtZSIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJDb21wYW55IE5hbWU6ICIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTgiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmNvbXBhbnlfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImNvbXBhbnlfbmFtZSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGlkOiAiY29tcGFueV9uYW1lIiwgcmVxdWlyZWQ6ICIiIH0sCiAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5jb21wYW55X25hbWUgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uY29tcGFueV9uYW1lID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIHJvdyIgfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJsYWJlbCIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbC1zbS00IGNvbC1mb3JtLWxhYmVsIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmb3I6ICJkZXNjcmlwdGlvbiIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJEZXNjcmlwdGlvbjogIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tOCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygidGV4dGFyZWEiLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZGVzY3JpcHRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkZXNjcmlwdGlvbiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgcm93czogIjQiLAogICAgICAgICAgICAgICAgICAgICAgaWQ6ICJkZXNjcmlwdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogIiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZGVzY3JpcHRpb24gfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGVzY3JpcHRpb24gPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgcm93IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sLXNtLTQgY29sLWZvcm0tbGFiZWwiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogImNvbnRhY3RfcGVyc29uIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnRhY3QgUGVyc29uOiAiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS04IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jb250YWN0X3BlcnNvbiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImNvbnRhY3RfcGVyc29uIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgaWQ6ICJjb250YWN0X3BlcnNvbiIsIHJlcXVpcmVkOiAiIiB9LAogICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uY29udGFjdF9wZXJzb24gfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uY29udGFjdF9wZXJzb24gPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgcm93IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sLXNtLTQgY29sLWZvcm0tbGFiZWwiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogImNvbnRhY3RfbnVtYmVyIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnRhY3QgTnVtYmVyOiAiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS04IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jb250YWN0X251bWJlciwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImNvbnRhY3RfbnVtYmVyIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgaWQ6ICJjb250YWN0X251bWJlciIsIHJlcXVpcmVkOiAiIiB9LAogICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uY29udGFjdF9udW1iZXIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uY29udGFjdF9udW1iZXIgPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgcm93IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sLXNtLTQgY29sLWZvcm0tbGFiZWwiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogImVtYWlsIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkVtYWlsIEFkZHJlc3M6ICIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTgiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmVtYWlsLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBpZDogImVtYWlsIiwgcmVxdWlyZWQ6ICIiIH0sCiAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5lbWFpbCB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lbWFpbCA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWZvb3RlciIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1zZWNvbmRhcnkiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiwgImRhdGEtZGlzbWlzcyI6ICJtb2RhbCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJidXR0b24iLCAiZGF0YS1kaXNtaXNzIjogIm1vZGFsIiB9LAogICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZFN1cHBsaWVyIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJBZGQiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm15LTQiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1vdXRsaW5lLWRhcmsgbXItMSIsCiAgICAgICAgICBhdHRyczogeyBocmVmOiAiL21hbmFnZXIvZXZlbnRzIiB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJFdmVudHMiKV0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1vdXRsaW5lLWRhcmsgbXItMSBhY3RpdmUiLAogICAgICAgICAgYXR0cnM6IHsgaHJlZjogIi9tYW5hZ2VyL3N1cHBsaWVycyIgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiU3VwcGxpZXJzIildCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tb3V0bGluZS1kYXJrIG1yLTEiLAogICAgICAgICAgYXR0cnM6IHsgaHJlZjogIi9tYW5hZ2VyL2RlbGl2ZXJpZXMiIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkRlbGl2ZXJpZXMiKV0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1vdXRsaW5lLWRhcmsgbXItMSIsCiAgICAgICAgICBhdHRyczogeyBocmVmOiAiL21hbmFnZXIvZW1wbG95ZWVzIiB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJFbXBsb3llZXMiKV0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1vdXRsaW5lLWRhcmsgbXItMSIsCiAgICAgICAgICBhdHRyczogeyBocmVmOiAiL21hbmFnZXIvaW5ib3giIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIkluYm94IildCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiYnV0dG9uIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY2xvc2UiLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICJkYXRhLWRpc21pc3MiOiAibW9kYWwiLAogICAgICAgICAgImFyaWEtbGFiZWwiOiAiQ2xvc2UiCiAgICAgICAgfQogICAgICB9LAogICAgICBbX2MoInNwYW4iLCB7IGF0dHJzOiB7ICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9IH0sIFtfdm0uX3YoIsOXIildKV0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1mb290ZXIiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXNlY29uZGFyeSIsCiAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiwgImRhdGEtZGlzbWlzcyI6ICJtb2RhbCIgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiQ2xvc2UiKV0KICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1oZWFkZXIiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImg1IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAibW9kYWwtdGl0bGUiLCBhdHRyczogeyBpZDogImV4YW1wbGVNb2RhbExhYmVsIiB9IH0sCiAgICAgICAgW192bS5fdigiQWRkIENvbnRhY3QiKV0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbG9zZSIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICAgImRhdGEtZGlzbWlzcyI6ICJtb2RhbCIsCiAgICAgICAgICAgICJhcmlhLWxhYmVsIjogIkNsb3NlIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgW19jKCJzcGFuIiwgeyBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfSB9LCBbX3ZtLl92KCLDlyIpXSldCiAgICAgICkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}