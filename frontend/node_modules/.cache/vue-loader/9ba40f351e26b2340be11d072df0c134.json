{"remainingRequest":"D:\\XAMPP\\htdocs\\IM2\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\XAMPP\\htdocs\\IM2\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\XAMPP\\htdocs\\IM2\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\XAMPP\\htdocs\\IM2\\EventManagement-PortraitsByBukool\\frontend\\src\\components\\Admin\\AdminServices.vue?vue&type=template&id=c219dd26&scoped=true&","dependencies":[{"path":"D:\\XAMPP\\htdocs\\IM2\\EventManagement-PortraitsByBukool\\frontend\\src\\components\\Admin\\AdminServices.vue","mtime":1627126657750},{"path":"D:\\XAMPP\\htdocs\\IM2\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626788476181},{"path":"D:\\XAMPP\\htdocs\\IM2\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1626788548640},{"path":"D:\\XAMPP\\htdocs\\IM2\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626788476181},{"path":"D:\\XAMPP\\htdocs\\IM2\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1626788548639}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}