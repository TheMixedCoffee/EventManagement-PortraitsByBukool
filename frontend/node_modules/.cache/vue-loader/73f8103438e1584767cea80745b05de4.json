{"remainingRequest":"D:\\XAMPP\\htdocs\\FINALS\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\XAMPP\\htdocs\\FINALS\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\XAMPP\\htdocs\\FINALS\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\XAMPP\\htdocs\\FINALS\\EventManagement-PortraitsByBukool\\frontend\\src\\components\\Landing.vue?vue&type=template&id=98feeed2&","dependencies":[{"path":"D:\\XAMPP\\htdocs\\FINALS\\EventManagement-PortraitsByBukool\\frontend\\src\\components\\Landing.vue","mtime":1608964614215},{"path":"D:\\XAMPP\\htdocs\\FINALS\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1608964590771},{"path":"D:\\XAMPP\\htdocs\\FINALS\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1608964610869},{"path":"D:\\XAMPP\\htdocs\\FINALS\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1608964590771},{"path":"D:\\XAMPP\\htdocs\\FINALS\\EventManagement-PortraitsByBukool\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1608964610868}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}